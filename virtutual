<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>360Â° Virtual Tour with Hotspots</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        .hotspot { position: absolute; width: 40px; height: 40px; background-color: green; border-radius: 50%; opacity: 0.8; cursor: pointer; }
        .info-box { 
            position: absolute; 
            background-color: rgba(0, 128, 0, 0.8); 
            color: white; 
            padding: 10px;
            border-radius: 5px; 
            display: none;
        }
        .nav-button {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 50px;
            background-color: white;
            border-radius: 50%;
            opacity: 0.8;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="360viewer"></canvas>
    <div class="info-box" id="infoBox"></div>
    <div class="nav-button" id="nextButton"></div>

    <script src="https://cdn.jsdelivr.net/npm/three@0.134.0/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.134.0/examples/js/loaders/EXRLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.134.0/examples/js/controls/OrbitControls.js"></script>
    <script>
        let scene, camera, renderer, controls;
        let currentImage = 0;

        const imageUrls = [
            "https://acg-media.struffelproductions.com/file/ambientCG-Web/media/hdri-preview/IndoorEnvironmentHDRI001/IndoorEnvironmentHDRI001_LQ.exr",
            "https://acg-media.struffelproductions.com/file/ambientCG-Web/media/hdri-preview/IndoorEnvironmentHDRI003/IndoorEnvironmentHDRI003_LQ.exr"
        ];

        init();
        animate();

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            controls = new THREE.OrbitControls(camera, renderer.domElement);

            loadImage(imageUrls[currentImage]);

            camera.position.set(0, 0, 0.1);

            // Add hotspots
            addHotspot(0.3, 0.5, 'green');
            addNavigationButton();

            window.addEventListener('resize', onWindowResize, false);
        }

        function loadImage(url) {
            const loader = new THREE.ExrLoader();
            loader.load(url, function(texture) {
                const sphereGeometry = new THREE.SphereGeometry(500, 60, 40);
                sphereGeometry.scale(-1, 1, 1);
                const sphereMaterial = new THREE.MeshBasicMaterial({ map: texture });
                const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
                scene.add(sphere);
            });
        }

        function addHotspot(x, y, color) {
            const hotspot = document.createElement('div');
            hotspot.className = 'hotspot';
            hotspot.style.backgroundColor = color;
            hotspot.style.top = `${(y * window.innerHeight) - 20}px`;
            hotspot.style.left = `${(x * window.innerWidth) - 20}px`;
            hotspot.addEventListener('click', showInfoBox);
            document.body.appendChild(hotspot);
        }

        function addNavigationButton() {
            const button = document.getElementById('nextButton');
            button.addEventListener('click', navigateToNextImage);
        }

        function navigateToNextImage() {
            currentImage = (currentImage + 1) % imageUrls.length;
            loadNewImage();
        }

        function loadNewImage() {
            // Clear the current scene and load new image
            scene.clear();
            loadImage(imageUrls[currentImage]);

            // Re-add hotspots
            addHotspot(0.3, 0.5, currentImage === 0 ? 'green' : 'yellow');
        }

        function showInfoBox() {
            const infoBox = document.getElementById('infoBox');
            infoBox.style.display = 'block';
            infoBox.innerHTML = `
                <h3>ILLUS</h3>
                <p>Illus lighting for your better vision. With innovative LED technology, we offer sustainable and efficient lighting solutions.</p>
            `;
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
    </script>
</body>
</html>
